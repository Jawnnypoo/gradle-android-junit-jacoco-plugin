import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

buildscript {
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'com.gradle.publish:plugin-publish-plugin:0.10.1'
    classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0'
    classpath "com.vanniktech:gradle-maven-publish-plugin:0.14.2"
  }
}

apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.vanniktech.android.junit.jacoco'
apply plugin: "com.vanniktech.maven.publish"
apply plugin: 'com.gradle.plugin-publish'


// Find the first non-null Gradle property or environment variable
// corresponding to the given names, giving preference to Gradle properties.
String propOrEnv(String... names) {
    // hasProperty, getProperty don't work when called directly in a closure;
    // they need a receiver that knows about properties, like rootProject.
    def p = rootProject
    def result = names.findResult { p.hasProperty(it) ? p.getProperty(it) : System.getenv(it) }
    if (result == null) {
        logger.error("Missing gradle property or environment variable: $names")
    }
    return result
}

mavenPublish {
    releaseSigningEnabled = false
    targets {
        uploadArchives {
          releaseRepositoryUrl = propOrEnv("ARTIFACTORY_URL", "instacart_artifactory_url")
          repositoryUsername = propOrEnv("ARTIFACTORY_USERNAME", "instacart_artifactory_username")
          repositoryPassword = propOrEnv("ARTIFACTORY_PASSWORD", "instacart_artifactory_password")
        }
    }
}

gradlePlugin {
  plugins {
    androidJUnitJacocoPlugin {
      id = 'com.vanniktech.android.junit.jacoco'
      implementationClass = 'com.vanniktech.android.junit.jacoco.GenerationPlugin'
    }
  }
}

repositories {
  mavenCentral()
  google()
  jcenter()
}

dependencies {
  api gradleApi()
  api localGroovy()

  compileOnly 'com.android.tools.build:gradle:7.1.2'

  testImplementation 'com.android.tools.build:gradle:7.1.2'
  testImplementation 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
  testImplementation 'junit:junit:4.13'
  testImplementation 'org.spockframework:spock-core:2.2-M1-groovy-3.0', { exclude module: "groovy-all" } // Use localGroovy()

  // https://github.com/gradle/gradle/issues/16774#issuecomment-893493869
  def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
    .getModule("gradle-tooling-api-builders")
    .classpath
    .asFiles
    .first()
  testRuntimeOnly(files(toolingApiBuildersJar))
}

sourceCompatibility = JavaVersion.VERSION_1_8

pluginBundle {
  website = POM_URL
  vcsUrl = POM_SCM_URL

  plugins {
    androidJUnitJacocoPlugin {
      displayName = POM_NAME
      tags = ['gradle', 'android', 'jacoco', 'app module', 'library module', 'junit', 'unit', 'testing', 'coverage']
      description = POM_DESCRIPTION
    }
  }
}

tasks.withType(Test).configureEach {
  testLogging {
    testLogging.exceptionFormat = 'full'
  }
}

wrapper {
  gradleVersion = '7.4'
  distributionType = Wrapper.DistributionType.ALL
}
